Type：
（1）如果类型是不带参数化类型的，那么就和原来的Class、数组（也是Class）、基本类型（也是Class）
一般要确定某个具体类型时，需要层层往下剥，最后的类型一定是不带参数化类型，中间的类型是ParameterizedType、GenericArrayType、WildcardType
（2）如果有参数则有三种
1、ParameterizedType: 表示一种参数化的类型，ParameterizedType内部包含了原始类型以及参数类型的Class，Method、Field可以获取到，然后借助ParameterizedType就可以知道具体的方法参数类型了。
对于类来说，可以获取父类的ParameterizedType
public class Person<T, E> {
}

public class Student extends Person<Student, Integer> {

    public static void main(String[] args) {
        Class clazz = Student.class;
        //获取带泛型的类型
        ParameterizedType superclass = (ParameterizedType) clazz.getGenericSuperclass();
        Type[] arguments = superclass.getActualTypeArguments();
        for (Type argument : arguments) {
            System.out.println(argument);
        }
    }
    
}

结果：
Student
Integer

那怎么获取某个实例的具体参数是什么呢？
ParameterizedType的方法包括
Type[] getActualTypeArguments()	参数化类型中的TypeVariable参数类型，如List 返回 String.class, List<List<> 返回List<>
Type getOwnerType()	获取当前Type所属的Type，比如对于O.I中的I类型，会返回O
Type getRawType()	获取当前Type的Class，如List 返回 List.class


2、GenericArrayType: 表示一种元素类型是参数化类型或者类型变量的数组类型，如List[][]；
层层递进
3、WildcardType: 代表一种通配符类型表达式，比如List<?>, List<? extends ClassA>, List<? super Object>。
