友情提醒：

JVM很难，网上错误的观点很多；
再次推荐你假笨（公众号）和RednaxelaFX（只有知乎和ITEYE，江湖人称R大）。
友情链接：http://hllvm.group.iteye.com/group/topic/28854（又是来自R大满满的干货，喜欢JVM的一定不要错过）


https://blog.51cto.com/u_15254813/3240238




1、finalize方法在执行时，被回收的对象仍旧被finalize线程引用着，无法被回收。如果这里堆积了那么就影响回收，导致内存溢出异常
注意gc线程在跑的时候，是不会等待finalize方法执行的，跟gc无关，gc只管能回收的那些，暂时不能回收的不管。
finalize线程执行完成之后，会移出队列，这样这个对象就不会被引用啦，下次回收就能正常回收了
2、jmap -histo 
3、cms触发条件
foreground collector 触发条件比较简单，一般是遇到对象分配但空间不够，就会直接触发 GC，来立即进行空间回收，这个过程业务线程是阻塞的。
background collector通过 CMS 后台线程不断的去扫描，过程中主要是判断是否符合 background collector 的触发条件，一旦有符合的情况，就会进行一次 background 的 collect。这类规则非常之多
正常情况下触发Backgroud模式的CMS GC，这是并发模式收集，对业务影响很小，你好我好都好。
当并发模式搞不定了，就会退化成Foreground模式，这个回收过程业务线程是不可用的，这时候就触发了FullGC。
接下来根据上面提到的两个参数决定是否采用MSC算法压缩堆。
CMSFullGCsBeforeCompaction决定多少次FullGC后压缩堆

4、参数
XX:CMSWaitDuration=5000 后台background扫描线程扫描时间间隔，其实就是Concurrent Mark-Sweep GC Thread线程的扫描间隔


-XX:+UseCMSCompactAtFullCollection
由于 CMS GC 会产生内存碎片，且只在 Full GC 时才会进行内存碎片压缩（因此 使用 CMS 垃圾回收器避免不了 Full GC）。这个参数表示开启 Full GC 时的压缩功能，减少内存碎片。
-XX:CMSInitiatingOccupancyFraction 表示触发 CMS GC 的老年代使用阈值，一般设置为 70~80（百分比），设置太小会增加 CMS GC 发生的频率，设置太大可能会导致并发模式失败或晋升失败。默认为 -1，表示 CMS GC 会由 JVM 自动触发。
-XX:+UseCMSInitiatingOccupancyOnly 表示 CMS GC 只基于 CMSInitiatingOccupancyFraction 触发，如果未设置该参数则 JVM 只会根据 CMSInitiatingOccupancyFraction 触发第一次 CMS GC ，后续还是会自动触发。建议同时设置这两个参数。
-XX:+CMSClassUnloadingEnabled
表示开启 CMS 对永久代的垃圾回收（或元空间），避免由于永久代空间耗尽带来 Full GC。
-XX:+CMSParallelInitialMarkEnabled 开启第一步gc root的并行标记，很重要，因为这一步是stw
-XX:+CMSScavengeBeforeRemark
在CMS GC前启动一次ygc，目的在于减少old gen对ygc gen的引用，降低remark时的开销-----一般CMS的GC耗时 80%都在remark阶段
24343434343
2434234234
243434
33333333333333333333
