0x000000000281f790	0x00000007803542c0 栈的最大边界值
0x000000000281f798	0x00000000028573ef 这个值本来也是0x00000007803542c0，不过调用了invokespecial之后，这个值就不可预测了
0x000000000281f7a0	0x000000000281f7a0 <- rsp操作数栈底，这个位置是不会存数据的，这是esp寄存器的压栈逻辑
0x000000000281f7a8	0x00000000199935c0 bytecode pointer
0x000000000281f7b0	0x000000000281f800 本地变量起始地址
0x000000000281f7b8	0x00000000199936f8 常量池？？无法通过inspect查看
0x000000000281f7c0	0x0000000000000000 main方法profile数据，暂时为空
0x000000000281f7c8	0x00000000199935f0 main方法Method元数据
0x000000000281f7d0	0x0000000000000000 操作数栈最后指针
0x000000000281f7d8	0x000000000281f800 old stack pointer (saved rsp)  
0x000000000281f7e0	0x000000000281f848 old frame pointer (saved rbp)    <- rbp 
0x000000000281f7e8	0x000000000282813d 返回地址
0x000000000281f7f0	0x0000000000000000 main方法好像不用这个                                                     这里也是fn方法的第2个参数t4
0x000000000281f7f8	0x00000007803542c0 main方法好像不用这个                                                     这里也是fn方法的第1个参数t3 = Test2对象
0x000000000281f800	0x00000007803542a0 本地变量test = new Test对象被压入栈                                      这里也是fn方法的第0个Test对象参数
0x000000000281f808	0x000000000281f808 <- rsp操作数栈底，这个位置是不会存数据的，这是esp寄存器的压栈逻辑
0x000000000281f810	0x0000000019993209 bytecode pointer
0x000000000281f818	0x000000000281f860 本地变量起始地址
0x000000000281f820	0x00000000199932a0 常量池？？无法通过inspect查看
0x000000000281f828	0x0000000000000000 main方法profile数据，暂时为空
0x000000000281f830	0x0000000019993230 main方法Method元数据
0x000000000281f838	0x000000000281f800 操作数栈最后指针
0x000000000281f840	0x000000000281f860 old stack pointer (saved rsp)  
0x000000000281f848	0x000000000281f940 old frame pointer (saved rbp)    <- rbp 
0x000000000281f850	0x000000000282061a 返回地址
0x000000000281f858	0x00000007803542a0 本地变量test = new Test
0x000000000281f860	0x0000000780350700 main方法数组参数args  


public class Main {
    public static void main(String[] args) {
        Test test = new Test();
        test.fn();
    }
}

class Test {
    static Test2 t1 = new Test2();
    Test2 t2 = new Test2();

    public void fn() {
        Test2 t3 = new Test2();
        Test2 t4 = t3;
    }
}

class Test2 {

}

0 new #2 <stacktest/Test2>
3 dup
4 invokespecial #3 <stacktest/Test2.<init> : ()V>
7 astore_1
8 aload_1
9 astore_2
10 return
